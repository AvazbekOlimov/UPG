@page "/monitors"

<MudTable Items="@Elements" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<MonitorDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Monitors</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton OnClick="AddPage" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success">Create</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Brand name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="id">@context.Id</MudTd>
        <MudTd DataLabel="Brand name">@context.BrandName</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    @inject HttpClient httpClient
    private string searchString1 = "";
    private MonitorDto selectedItem1 = null;
    @inject NavigationManager navigate;

    private IEnumerable<MonitorDto> Elements = new List<MonitorDto>();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync(Helper.URL + "monitors");
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<MonitorDto>>();
        }
    }

    private bool FilterFunc1(MonitorDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MonitorDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BrandName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void AddPage()
    {
        navigate.NavigateTo("monitors/add");
    }
}